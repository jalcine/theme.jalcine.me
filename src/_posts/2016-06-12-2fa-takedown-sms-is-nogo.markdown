---
layout: post
title: "Two Factor Take Down - How SMS-Based 2FA Shouldn't Be Your Only Angle"
byline: >
  Be real and add more options than SMS. Don't make it your foundation. We as
  developers can provide better security options for our end users.
excerpt: >
  It doesn't take much to get past SMS-based 2FA (two factor authentication).
  Here I speak on ideas around how to move past SMS-based 2FA (and passwords).
date: 2016-06-12 22:40:30 PDT
image: /images/hacking-password.jpg
tags:
  - response
  - thoughts
  - security
---

If you're reading this, you probably peeped that moment when [@deray][]'s
account tweeted out how he was allegedly supporting Donald Trump :skull: :mask:.
Deray [responded after deleting said tweet][1]:

{% twitter oembed https://twitter.com/deray/status/741355511224913920 %}

Whenever something happens on the Internet, people tend to write :pencil:
about it. Like [Wired][] or [Buzzfeed][]. Buzzfeed was useful here and did
homework on the big four telcom providers in the US on informing you how to
prevent people from overriding your account. But this shows a problem in the pipeline.

> ###### :warning: #MajorJargonAlert :warning:
> Before we continue, I'll define a few terms.
>
>  * **telcom** is short for [telecommunications community][2]. This is T-Mobile,
>   Sprint, etc.
>  * **2FA**  is short for [two-factor authentication][3]. It's like that extra
>   lock on your door. Except that it shouldn't be the same kind of lock you'd
>   typically to _open your door_. More on that later.
>  * **OTP** is short for one-time passwords.
>  * **TLS** is the successor of **SSL**, what provides security for HTTP on the
>    web. It's indicated to be in use and active if you see a green lock in your
>    address bar.
>
> There's a _lot_ of abbreviations in the security space. A little too many.

We _still_ have to remember a code that's sent over the phone (or given to us
**in person**) that's _hopefully_ hashed on the telcom's side and now stored
insecurely (if it's not encrypted somewhere, you ain't keeping it safe, b) by
the consumer. This still doesn't address the fact that SMS is very weak in 
terms of message security with  the correct tooling.

{% twitter oembed https://twitter.com/jackyalcine/status/741679286315188224 %}

## If You Can't See It, Chances Are You Can't Control It
When it comes to SMS 2FA, social engineering is _the_ way to break it.
The [FTC's CTO got compromised][4] this way as well! The most commonly 
suggested way for users (note - not even the company) by telcom providers
to handle this is to use yet _another_ password or PIN[^1] to protect your 
account. This is more that _you_ have to remember and more *risk* external
entities that you _have to trust_ are offloading to you.

Here come the **secure tokens**. A secure token is a device or an abstraction of one
that can provide the following (and more):

  * generates a OTP for the sake of a login or authorization
    window.
  * generates a signed message with a stored private key.
  * presents a challenge and valid response for authorization.

{% twitter oembed https://twitter.com/jackyalcine/status/741679789715529728 %}

> One time passwords can also be sent via SMS, but for the
> simple reason that you aren't the **origin of generation** of said one-time
> password and that it's _transmitted_ over an insecure protocol (a
> pre-established means of sending and receiving data); you're *extremely*
> liable to get comprised by a social engineering attack like the one that
> happened to Deray and the FTC's CTO.

Having these secret generators local to your person makes it harder for social
engineering attacks that rely on external companies. Of course, there's other
vectors people can attack you from:

  * insecure networks could attempt to strip TLS (or masquerade as a site that
    wants you to use your OTP), capture your OTP that you've entered and login
    on your behalf. **Side-note: do NOT login or handle sensitive information
    over open/insecure networks or networks you don't fully control or
    trust**[^2].
  * idleness of your machine could leave someone momentarily sniffing your
    keystores via a USB device that transmits your keystores out to their
    machine and even a screenshot of your device[^3].
  * physical (written) recording of backup codes generated by OTP solutions that
    use secure tokens. One of these codes can pull down the entire house.

### Recapping SMS Spoofing and How SMS 2FA Typically Works
[SMS spoofing][8] is the act of sending a message from one number to
a victim's phone as another number, a form of masquerading messaging.
This could allow an attacker to emulate a request from a service to provide 
a OTP backup code or password. With that, they can enter said service 
(let's say it's GMail) and work as if they're you[^6].

Currently, with SMS-based 2FA (I'm calling this SMS-FA), you have to depend on a
remote service to generate a [_nonce_][9], a uniquely generated value that should be
computable at most once on request. Ideally. You then wait for said nonce to
travel over SMS from a third-party service (like Twilio or Tropo) to your phone.
This means the only person who can confirm that this number is truly the value
to be checked for authentication is the remote party. You have no way to know
for sure that this is a valid value to be used here _nor_ can you be sure that
the value computed hasn't been used already - it passes through two different
people before it gets to you.

---

Google [supports the use of secure tokens][5] as well as bunch of websites
that you may find on <https://twofactorauth.org/>. The key thing here is to look
for hardware token support. If your preferred service doesn't have it and you're
_extremely_ concerned about security, you might want to switch or [suggest
another tool to said company][clef].

> There's also the idea of using _email for authentication_. For a lower barrier 
> means of getting into this, using emails to sign in remotely can help. A lot 
> of services like [Slack][] and [Medium][] currently provide this as an option.

## Why Do Secure Tokens Matter so Much?
Secure tokens provide a very interesting approach to logging into a service.
Instead of you constantly typing a passphrase to a service over and over again,
the remote service and the secure token go through a bit of a negotiation phase.

On first setup, the device would share a public key or a pre-shared key that
both the device and the remote service are aware of. This public key is what's
going to be used by the remote service to ensure that the message sent is from
who they think it is and how the device can prove that its personal key from
which the public key is derived from is legit.

This is important (the whole sharing of a public key - PSK) so that whenever the
secure token generates a signed message that's meant to hold information that
was intended _only_ for the service in question; you, as the remote service, can
confirm that the message you intended to send out was indeed from the party in
question.

Still with me? Awesome :bomb:. Now, let's see some definite wins for using
secure tokens over SMS as an 2FA (or a primary factor) option.

#### You can destroy them.
The minute you feel that your account's been compromised or if you need to shake
off a commonly used device, the destruction of your security token *and* having
at least one trusted device to log in from allows you to sweep your
authentication cycle.

There _is_ a hole here and it's an unsolved tactic of this whole process:
_recovery_. If you lose your token or can't access any previously trusted
devices, how do you get in? Ideally, you shouldn't be able to: this is the same
situation an attacker would be in. However, in the case of one-time passwords,
you're issued a set of codes that can be used as valid (but momentarily, since you
can only use them once) codes for signing in. Keeping these numbers secure is
crucial :key: since they effectively break the whole flow for one-time
passwords[^4].

#### MITM (Man In the Middle) attacks become nigh-impossible.
Since the act of generating a secure, valid and confirmable value is now
delegated to a secure token you own, you can now send this value directly to the
asking party and not have to concern yourself with the number of hands this
sensitive value had to travel to get to you.

#### You, as a user, need to remember nothing.
Customers of a service, or users of a service in general, now have to remember
nothing at all. In the case of people using their personal devices like a laptop
or phone as an authenticating factor, the only thing they'd probably need is the
system's password or PIN. In the case of most consumer applications, this tends
to be well more guarded than someone's password to Netflix.

#### No more sharing of passwords.
Without the use of passwords and relying solely on pre-shared keys for
authentication and authorization, we now don't have to worry about users
recycling passwords to use across different sites.

> There is the issue of a public key being shared across multiple services 
> though. This is something [Clef][] manages to mitigate with unique logins 
> across different applications you interact.

---

Again, this pushes a _lot_ of the act of handling recovery, remembering and 
storage fluff onto the user. There's also the now shared key across all of these
services if a user is afraid of having their key seized. 

If you're a developer at a company and you're serious about making it easier 
for people to sign in without any concerns (or passwords), check out 
[Clef][][^5]. Clef's building two factor products that handles a _lot_
of the work for both the company to be secured and the user handling their 
credentials. Recovery of accounts comes with this service. [Check out how 
Clef works][10] and see how classical attempts at user authentication can 
be protected using Clef.

It's also on this premise here that I suggest Clef as an answer:

{% twitter oembed https://twitter.com/EricaJoy/status/741294065841360896 %}

Passwords are the **zombies of user security**. They _should_ be dead, but due to a
myriad of reasons (low prioritizing as a concern by companies, users finding
alternative options as too high a barrier or confusing, etc), they've managed to
stick around. We, as developers _and_ consumers, can fix that and prevent social
engineering attacks based on leaky implementations of 2FA from happening.

## What Can You Do?
I threw a lot of terms and random tweets in your face just now. What I can
immediately suggest is not that you disable any SMS factor of one-time
passwords for services. Instead, inspect what services you currently have
secured via SMS 2FA and switch them over to using a software-implementation of
this (dubbed TOTP). There's a few implementations of this - I lean on open
implementations purely for the ease of mind to know that the underlying secret
used for this isn't being shared with a third party. There's FreeOTP for
[Android][freeotp-and] and [iOS][freeotp-ios].

OTP applications are a bit of a stop-gap. Microsoft has a compelling solution
that makes even signing in on the Xbox One[^6] easier: [Microsoft Account][6].
Instead of relying on SMS, Microsoft went ahead and built an in-house solution
that handles _login verifications_. Microsoft isn't the only one with this;
Twitter had [this as an option][7] for their mobile clients[^7], but removed the
push notification approach with the SMS solution. How comforting.

---

I say all to say that security, just the authentication of identity part, isn't
easy but there's people and actively working solutions out there already. I'm
working at a place that's aiming to make it _a lot easier_ for people to prove
**who they are** online and hope that future conversations can lead to a better
experience for both services and users.

[@deray]: https://twitter.com/deray
[1]: https://twitter.com/deray/status/741355511224913920
[wired]: https://www.wired.com/2016/06/derays-twitter-hack-reminds-us-even-2-factor-isnt-enough/
[buzzfeed]: https://www.buzzfeed.com/nicolenguyen/how-to-prevent-yourself-from-getting-hacked-with-two-factor
[2]: https://en.wikipedia.org/wiki/Telecommunications_company
[3]: https://en.wikipedia.org/wiki/2FA
[4]: http://arstechnica.com/tech-policy/2016/06/ftcs-chief-technologist-gets-her-mobile-phone-number-hijacked-by-id-thief/
[5]: https://www.google.com/landing/2step/#tab=how-it-works
[6]: https://www.microsoft.com/en-US/store/apps/Authenticator/9WZDNCRFJ3RJ
[7]: https://support.twitter.com/articles/20170388
[8]: https://en.wikipedia.org/wiki/SMS_spoofing
[9]: https://duckduckgo.com/Cryptographic_nonce?iax=1&ia=about
[10]: https://getclef.com/security/
[^1]: Usually 4 digits, to be used as a "barrier of protection".
[^2]: This is that Starbucks WiFi or that protected network at your local coffee shop.
[^3]: Don't leave your computer alone in a public place. Don't trust people to watch it for you.
[^4]: One would notice that this means that all one would have to do is constantly try numbers until they get passed this flow. However, this typically requires knowledge of the user's password.
[^5]: Yes, I work for Clef.
[^6]: My Microsoft account password is not easy to type, so if y'all could allow app password usage on the Xbox One, I'd sorely appreciate it.
[^7]: The plot thickens! This could have potentially prevented Deray's incident had Twitter disabled SMS 2FA when you had this enabled.
[^8]: Granted, in order for a SMS spoof of this nature to work with Google, they'll also need your password.
[clef]: https://getclef.com/features/
[freeotp-and]: https://play.google.com/store/apps/details?id=org.fedorahosted.freeotp
[freeotp-ios]: https://itunes.apple.com/us/app/freeotp-authenticator/id872559395?mt=8
[slack]: https://get.slack.help/hc/en-us/articles/212681477-Signing-in-to-Slack
[medium]: https://medium.com/the-story/signing-in-to-medium-by-email-aacc21134fcd#.o19zwohs0
