<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title type="text" xml:lang="en">A little ol' collection of text and images.</title>
  <link type="application/atom+xml" href="http://blog.jalcine.me/feed" rel="self"/>
  <link type="text" href="http://blog.jalcine.me" rel="alternate"/>
  <updated>2013-09-03T16:33:55-04:00</updated>
  <id>http://jalcine.me/weblog</id>
  <author>
    <name>Jacky Alcin√©</name>
    <email>me@jalcine.me</email>
  </author>
  <rights>Copyright (c) 2012 - 2013, Jacky Alcine; all rights reserved.</rights>

  
  <entry>
    <title>Starting Off As A Developer</title>
    <link href="http://jalcine.me/weblog/weblog/starting-off-as-a-developer"/>
    <updated>2013-08-23T03:41:46-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/starting-off-as-a-developer</id>
    <content type="html">&lt;p&gt;If there&amp;#8217;s one thing I&amp;#8217;ve been lacking in, it&amp;#8217;s being a &lt;em&gt;social coder&lt;/em&gt;. I&amp;#8217;m a social(-ish) person but I&amp;#8217;m not that social when it comes to code. I&amp;#8217;ve noticed that the best code is written by people who are out there communicating their thoughts, like the jQuery or Vim projects. It makes sense since you&amp;#8217;re &lt;em&gt;using a language&lt;/em&gt; to express an idea into a logical (or functional) flow. Communication of an idea is absolutely required then.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://twitter.com/r00k&#39;&gt;Ben&lt;/a&gt; wrote a &lt;a href=&#39;http://codeulate.com/2013/08/a-short-guide-to-landing-your-first-rails-job/&#39;&gt;very light post&lt;/a&gt; about getting a first job as a Rails developer. Of course, the details of the post can be applied to most other languages and practices, be it Android, iOS, web design or even C++, have you! But it&amp;#8217;d have to be proven for that to be fact. Nonetheless, it did get me thinking; I have this blog and I occasionally post about little things that don&amp;#8217;t really show my current situations with code. I&amp;#8217;ve decided to write a post at least twice a week about my current code projects and things I&amp;#8217;ve learned in code. It not only helps people who are just searching for stuff on the Web, but it serves as a memory anchor for me so I don&amp;#8217;t have to remember details.&lt;/p&gt;

&lt;p&gt;As the Doctor would put it, Hello! &lt;img alt=&#39;Hello!&#39; src=&#39;/images/hello-im-the-doctor.gif&#39; /&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Remote Debugging with Android</title>
    <link href="http://jalcine.me/weblog/weblog/remote-debugging-with-adb"/>
    <updated>2013-07-31T04:30:00-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/remote-debugging-with-adb</id>
    <content type="html">&lt;p&gt;If there&amp;#8217;s one thing that plagues a developer at times, it&amp;#8217;s the number of cables we have hooked up to our machines. Laptops, phones, tablets, watches, you name it! Even chargers for our chargers. I&amp;#8217;m out to solve &lt;em&gt;one&lt;/em&gt; of those problems and it helps when you&amp;#8217;re doing some interactive Android development.&lt;/p&gt;

&lt;p&gt;The Android debugging bridge tool (aka &lt;code&gt;adb&lt;/code&gt;) is a super-nifty tool that allows you to manage your devices, emulated or physical. A powerful use of it is the ability to handle all of its communication over &lt;a href=&#39;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&#39;&gt;TCP&lt;/a&gt;, a (mostly) state-aware means of transporting packets of data over &lt;a href=&#39;http://en.wikipedia.org/wiki/Internet_Protocol&#39;&gt;IP&lt;/a&gt;. Using a device over TCP allows you to decouple the cable from your laptop or working station and move around with said device much more freely, making it easy to build and test gyroscopic applications, for example.&lt;/p&gt;

&lt;h2 id=&#39;getting_started&#39;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ironically, the first thing you&amp;#8217;d have to do is plug your device to your station of choice. Check if it&amp;#8217;s visible to &lt;code&gt;adb&lt;/code&gt; by running the following:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;adb devices
List of devices attached 
&amp;lt;hexadecimal number of device&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;If you see no devices listed, please ensure that &lt;strong&gt;USB Debugging&lt;/strong&gt; is enabled on your Android device.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, connect both devices to a &lt;strong&gt;WiFi network&lt;/strong&gt;. Go into your Android device and make note of the IP address it has. You can find this under &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Wi-Fi&lt;/strong&gt; &amp;gt; Options - Advanced at the field &amp;#8220;IP address&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#39;connecting_to_the_device&#39;&gt;Connecting to the Device&lt;/h2&gt;

&lt;p&gt;With that knowledge, and your Android device still plugged in, let&amp;#8217;s set the device&amp;#8217;s debugging tool to listen over TCP on port 5555:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;ve seen that you&amp;#8217;d need administrative privileges if you&amp;#8217;re running Windows, check out &lt;a href=&#39;http://stackoverflow.com/questions/2604727/how-can-i-connect-to-android-with-adb-over-tcp&#39;&gt;this question&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From here, you can (and should unless you&amp;#8217;re charging over USB) remove your Android device from your laptop. We&amp;#8217;d finish up the connection by connecting to the device over the network.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;adb connect 0.0.0.0
&lt;span class=&#39;c&#39;&gt;# Replace 0.0.0.0 with the device&amp;#39;s IP you found earlier.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s all there is to it! You should now be able to find this device in Eclipse or Android Studio for debugging now. If any more questions come up, try asking someone in &lt;code&gt;#android-dev&lt;/code&gt; on Freenode or sending an e-mail to the mailing list over at &lt;a href=&#39;https://groups.google.com/forum/#!forum/android-developers&#39;&gt;Google Groups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy hacking!&lt;/strong&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Project Minimal</title>
    <link href="http://jalcine.me/weblog/weblog/project-mini"/>
    <updated>2013-07-27T17:52:09-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/project-mini</id>
    <content type="html">&lt;p&gt;In an attempt to make things a bit more minimal-ish, I&amp;#8217;ve re-done the top-level of my website with a full-page, two-column approach. I got the original concept of it from the older version of jekyllrb.com; it had a Dr. Jeykll / Mr. Hyde look to it. I loved it and splashed my favorite color on top of it for fun.&lt;/p&gt;

&lt;p&gt;This had me realize that imitation is not only the highest form of flattery, but also a good way to practice. Designing that page did re-teach me some concepts in centering text and block elements on a web page, something you&amp;#8217;d think would be direct, e.g.: &lt;code&gt;vertical-align&lt;/code&gt; + &lt;code&gt;text-align&lt;/code&gt;. There goes project Minimal!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;EDIT 2013-08-31&lt;/strong&gt;: Now, I dropped the whole two-column thing and just have a centered 70% width column with a gutter of 15%. Fluid ftw.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Going Above and Beyond</title>
    <link href="http://jalcine.me/weblog/weblog/going-above-and-beyond"/>
    <updated>2013-07-26T06:15:00-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/going-above-and-beyond</id>
    <content type="html">&lt;p&gt;I replied applied for a job as a front-end developer at a pretty amazing digital agency in SoHo, NYC. Meeting with the lead developer, I already loved the potential environment that I could have immersed myself in for days at a time. To complete the first round of the process, a code test was presented.&lt;/p&gt;

&lt;p&gt;Pretty (reasonable)&lt;sup id=&#39;fnref:1&#39;&gt;&lt;a href=&#39;#fn:1&#39; rel=&#39;footnote&#39;&gt;1&lt;/a&gt;&lt;/sup&gt; (and quite standard) in the tech community for figuring out a developer&amp;#8217;s prowess. About a few days later, I called in to ask about the position. I was turned away because I &amp;#8220;overengineered&amp;#8221;. I was disheartened not because I was turned away per se, but more for to the reason of the such. I didn&amp;#8217;t think that I pushed too hard for the project. It was a simple landing page that collected a few fields from the user. The UX was built from slicing up a PSD but outside of that, it was simple.&lt;/p&gt;

&lt;p&gt;When I did hear the alternative (solution)&lt;sup id=&#39;fnref:2&#39;&gt;&lt;a href=&#39;#fn:2&#39; rel=&#39;footnote&#39;&gt;2&lt;/a&gt;&lt;/sup&gt;, I noticed something very important. In order for me to continue going down this route as a front-end developer, I have to remember that I don&amp;#8217;t need frameworks let alone management tools to (GSD). The application could have been easily built by hacking up a page using HAML and then writing a quick-n-dirty PHP script to handle the rest.&lt;/p&gt;

&lt;p&gt;The means to a solution doesn&amp;#8217;t make it the correct one. Sometimes just getting the shit done easy and cleanly is just the better way to go. &lt;strong&gt;Pro-tip:&lt;/strong&gt; don&amp;#8217;t over-do it and build a full-blown SaaS. Just open up TextEdit with a &lt;code&gt;.htm&lt;/code&gt; file and call it a day.&lt;/p&gt;
&lt;div class=&#39;footnotes&#39;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&#39;fn:1&#39;&gt;
&lt;p&gt;I&amp;#8217;ll expand in a future post about it.&lt;/p&gt;
&lt;a href=&#39;#fnref:1&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id=&#39;fn:2&#39;&gt;
&lt;p&gt;My solution was using Silex for rendering a simple language page and handle the work of using Campaign Monitor to collect e-mail addresses. The solution provided was using a fully built HTML page and then having a lighter backend tool to handle the logistics.&lt;/p&gt;
&lt;a href=&#39;#fnref:2&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Why I Want A Job</title>
    <link href="http://jalcine.me/weblog/weblog/why-i-want-a-job"/>
    <updated>2013-07-24T07:34:38-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/why-i-want-a-job</id>
    <content type="html">&lt;p&gt;At the time of writing, I&amp;#8217;m unemployed. My &lt;a href=&#39;http://linkedin.com/in/jackyalcine&#39;&gt;LinkedIn profile&lt;/a&gt; says otherwise, but I&amp;#8217;m slowly squeezing out my savings as we speak. Being twenty and still living with your parents has its ups (and its downs, oh man the downs). But it&amp;#8217;s definitely about time I got my hands wet with something I&amp;#8217;d want to work on.&lt;/p&gt;

&lt;p&gt;Before I continue, I have to admit, I had two opporunities to work in some established startups. The only problem was my lack of knowledge of certain paradigms like the &lt;a href=&#39;http://en.wikipedia.org/wiki/Facade_pattern&#39;&gt;Facade&lt;/a&gt; or the reason why Node.js seems to be such a magical god-send.&lt;/p&gt;

&lt;p&gt;Nowadays, I&amp;#8217;ve been urged to join a fellowship of sorts, first the &lt;a href=&#39;http://www.thielfellowship.org/&#39;&gt;Theil Fellowship&lt;/a&gt;, &lt;a href=&#39;www.hackerschool.com&#39;&gt;Hacker School&lt;/a&gt;, and a few others. I turned them down out of a lack of a big idea idea I was willing to turn into a lucrative business. That&amp;#8217;s not my end-goal, to make money off of people. I want to make some kickass software that&amp;#8217;s inseparable, something that makes you wish that you made it yourself!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At the same time, I don&amp;#8217;t have those skills. I don&amp;#8217;t have the necessary knowledege to build stuff at the speed of demigods building kernels for the hell of it. I&amp;#8217;m still a developer-in-training and that&amp;#8217;s why I&amp;#8217;d want training in a bit of a stressful, deadline-paced environment, aka, a workplace.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://www.dropbox.com/s/jl9n7z9wq3aq37g/Resume.pdf&#39;&gt;&lt;strong&gt;So hire meh&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>I'm Not a Programmer</title>
    <link href="http://jalcine.me/weblog/weblog/im-not-a-programmer"/>
    <updated>2013-07-21T08:34:20-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/im-not-a-programmer</id>
    <content type="html">&lt;p&gt;After failing to land a job with three different companies in three different fields of the Web (advertising, digital agency and art), it struck me that maybe I&amp;#8217;m just &lt;strong&gt;not a programmer&lt;/strong&gt;. I mean, I never had any real formal instruction; everything I know is from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reading &lt;a href=&#39;http://php.net/manual/en/index.php&#39;&gt;guides&lt;/a&gt; &lt;a href=&#39;http://guides.rubyonrails.org&#39;&gt;for&lt;/a&gt; &lt;a href=&#39;https://nose.readthedocs.org/en/latest/&#39;&gt;software&lt;/a&gt; &lt;a href=&#39;http://qt-project.org/doc/&#39;&gt;I use&lt;/a&gt; &lt;a href=&#39;http://foundation.zurb.com/docs&#39;&gt;a lot&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;+ &amp;#8230;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s mostly it. All of the real-world experience I&amp;#8217;ve had was at this one &amp;#8220;startup&amp;#8221;&lt;sup id=&#39;fnref:1&#39;&gt;&lt;a href=&#39;#fn:1&#39; rel=&#39;footnote&#39;&gt;1&lt;/a&gt;&lt;/sup&gt; and being such a novice at &lt;a href=&#39;http://rubyonrails.org&#39;&gt;Rails&lt;/a&gt; at the time, I had to learn everything about the framework by breaking production at least three times a day, with like hour-long outages. I did learn the usefulness of having a CI server set up&lt;sup id=&#39;fnref:2&#39;&gt;&lt;a href=&#39;#fn:2&#39; rel=&#39;footnote&#39;&gt;2&lt;/a&gt;&lt;/sup&gt;, test-driven development and pair programming.&lt;/p&gt;

&lt;h2 id=&#39;introspect_watson&#39;&gt;Introspect, Watson.&lt;/h2&gt;

&lt;p&gt;I mean, I don&amp;#8217;t see myself as a programmer. Yes, I know the syntax of C++, C, Python, Java, C#, D, VimL, Ruby, and JavaScript. I understand and know the proper structure of HTML, CSS, XML, JSON, YAML and INI files. I know a bit about why everything&amp;#8217;s a file on UNIX systems and I can patch code without too much difficulty.&lt;/p&gt;

&lt;p&gt;But what does it mean? What does it mean to a programmer? Is that even what I want? Hear me out, I love technology, being a digital native and not able to know where to go without Google Maps or when to be places with Google Calendar is a sign enough. I read tech blogs instead of world news most of the time; I provide third-party support on IRC and on forums. But am I a &lt;em&gt;programmer&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&#39;a_prowhat&#39;&gt;A Pro-what?&lt;/h2&gt;

&lt;p&gt;I only really got in application development&lt;sup id=&#39;fnref:3&#39;&gt;&lt;a href=&#39;#fn:3&#39; rel=&#39;footnote&#39;&gt;3&lt;/a&gt;&lt;/sup&gt; because of Iron Man and my want to be just like Tony Stark in mostly the technical aspect of things. I went super-hard with the C++ learning and jumped into C# with no training. Loved it because it was just cooler than C++, but went back to C++ because, simply, I knew what I was doing.&lt;/p&gt;

&lt;p&gt;Now, I&amp;#8217;m mixing everything up. If I&amp;#8217;m not hacking/struggling with &lt;a href=&#39;http://github.com/jalcine/wintermute&#39;&gt;Wintermute&lt;/a&gt;, then I&amp;#8217;m looking for a (easy) bug to fix in &lt;a href=&#39;http://kde.org&#39;&gt;KDE&lt;/a&gt; or &lt;a href=&#39;http://ubuntu.com&#39;&gt;Ubuntu&lt;/a&gt;. If I don&amp;#8217;t feel like worrying about pointers and memory management, I hack on my site by changing the theme eight times by mostly duplicating what I see on the Web&lt;sup id=&#39;fnref:4&#39;&gt;&lt;a href=&#39;#fn:4&#39; rel=&#39;footnote&#39;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#39;doctor_who&#39;&gt;Doctor WHO?&lt;/h2&gt;

&lt;p&gt;Watching the Iron Man trilogy over and over again, as well as saturating myself with seasons 3 to 7 of Doctor Who whilst I&amp;#8217;m hacking doesn&amp;#8217;t help sort my mind (or be productive, for that matter). But it does help me reassure myself of one thing: I want &lt;strong&gt;it&lt;/strong&gt;. It&amp;#8217;s a fire of sorts, the ability to create unimaginable things at whim, to build tools that people will &lt;em&gt;not&lt;/em&gt; be able to live without, to change how we live. I want to do something of that magnitude but I just don&amp;#8217;t know how.&lt;/p&gt;

&lt;p&gt;And that&amp;#8217;s why I think I&amp;#8217;m not a programmer because this is what they do. They build and sculpt the tech that powers our planets. They paint and draw the cues and gestures that become part of muscle memory. If not for them, who would build Angry Birds, Facebook or even Sconex? We wouldn&amp;#8217;t be lacking in a culture, but it&amp;#8217;s a culture we shouldn&amp;#8217;t miss out on (the culture of technology).&lt;/p&gt;

&lt;h2 id=&#39;eleventh_hour&#39;&gt;Eleventh Hour&lt;/h2&gt;

&lt;p&gt;This does provide opportunity. I have the opportunity, network and function that a developer would need to better themselves in today&amp;#8217;s society (or Web). It&amp;#8217;s not the same place it was five years ago, and that&amp;#8217;s for the better (in most cases). My only question (to myself) is whether or not I&amp;#8217;m capable of actually feeling like a developer and not just calling myself one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wish me luck&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#39;footnotes&#39;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&#39;fn:1&#39;&gt;
&lt;p&gt;I&amp;#8217;m not going to name them, but refusing to pay me for the hours I work is worth noting and if I was ever approached by them, I&amp;#8217;d say lightly, &amp;#8220;They&amp;#8217;re less-than-okay people and they see coders as batteries.&amp;#8221;&lt;/p&gt;
&lt;a href=&#39;#fnref:1&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id=&#39;fn:2&#39;&gt;
&lt;p&gt;Jenkins is my best friend here. It was a hurdle to set up, but once it was up, it would &lt;strong&gt;not&lt;/strong&gt; come down.&lt;/p&gt;
&lt;a href=&#39;#fnref:2&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id=&#39;fn:3&#39;&gt;
&lt;p&gt;Noticing a trend here? Yeah? Good.&lt;/p&gt;
&lt;a href=&#39;#fnref:3&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id=&#39;fn:4&#39;&gt;
&lt;p&gt;I&amp;#8217;m not very original, sadly. It&amp;#8217;s hard for me to come up with interesting ideas to myself. To others, it might pique their curiosity, but mine has yet to be.&lt;/p&gt;
&lt;a href=&#39;#fnref:4&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Welcome to Jekyll!</title>
    <link href="http://jalcine.me/weblog/weblog/welcome-to-jekyll"/>
    <updated>2013-07-19T21:10:05-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/welcome-to-jekyll</id>
    <content type="html">&lt;p&gt;After a bit of trouble with &lt;a href=&#39;http://octopress.org&#39;&gt;Octopress&lt;/a&gt;, I decided to make my life a bit simpler and take it up a notch. I decided to start using &lt;a href=&#39;http://jekyllrb.com&#39;&gt;Jekyll&lt;/a&gt; after I&amp;#8217;ve noticed a &lt;a href=&#39;http://sodevious.me&#39;&gt;few&lt;/a&gt; &lt;a href=&#39;http://brandonbohling.com/&#39;&gt;people&lt;/a&gt; I knew use that as opposed to Octopress. I see why now, just write your post and you&amp;#8217;re down.&lt;/p&gt;

&lt;p&gt;Jekyll also gives one a chance to modularize their static work simply. I was going to directly import my older theme for my website; but something stopped me. It wasn&amp;#8217;t simple enough for my eye and I try to be as simple (but comprehensive) as possible. In order for this to happen, of course, I had to start from scratch. Being a &lt;a href=&#39;http://foundation.zurb.com&#39;&gt;Yeti lover&lt;/a&gt;, I decided to use it to work on this blog, but with a &lt;a href=&#39;http://designshack.net/articles/css/mobilefirst/&#39;&gt;mobile-first&lt;/a&gt; approach. I went as far as to only look at my Nexus 4 whilst checking for changes; and that was quite interesting of a go.&lt;/p&gt;

&lt;h2 id=&#39;site_redesign&#39;&gt;Site Re-design&lt;/h2&gt;

&lt;p&gt;If you haven&amp;#8217;t noticed, this site is in my (favorite shade of purple)&lt;sup id=&#39;fnref:1&#39;&gt;&lt;a href=&#39;#fn:1&#39; rel=&#39;footnote&#39;&gt;1&lt;/a&gt;&lt;/sup&gt;. I&amp;#8217;m not quite sure &lt;em&gt;why&lt;/em&gt; I like this color, but it sure as hell soothes me when I look at it. The new simple layout was inspired from a few sources, primarly being &lt;a href=&#39;https://twitter.com/_dte&#39;&gt;Daniel Eden&amp;#8217;s&lt;/a&gt; &lt;a href=&#39;http://daneden.me/&#39;&gt;own website&lt;/a&gt; and &lt;a href=&#39;https://twitter.com/mattgemmell&#39;&gt;Matt Gemmell&amp;#8217;s&lt;/a&gt; &lt;a href=&#39;http://mattgemmell.com/&#39;&gt;blog&lt;/a&gt;; two people I look towards when it comes to code and design.&lt;/p&gt;

&lt;p&gt;By trade, I aim to be a hard-core backend developer. I avoid using &lt;a href=&#39;http://www.adobe.com/mena_en/products/photoshop.html&#39;&gt;graphical&lt;/a&gt; &lt;a href=&#39;http://www.krita.org&#39;&gt;editing&lt;/a&gt; tools and stick to my &lt;a href=&#39;http://vim.org&#39;&gt;favorite text editor&lt;/a&gt; with my personalized &lt;a href=&#39;https://github.com/jalcine/vimrc&#39;&gt;configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#39;portfolio_building&#39;&gt;Portfolio Building&lt;/h2&gt;

&lt;p&gt;Personally, I&amp;#8217;m not much of a (coder)&lt;sup id=&#39;fnref:2&#39;&gt;&lt;a href=&#39;#fn:2&#39; rel=&#39;footnote&#39;&gt;2&lt;/a&gt;&lt;/sup&gt;, but I&amp;#8217;m working to become the one I have in mind. However, it seems like the only way for me to get into the field and actually have funds to keep myself alive would be to jump into the world of web development. Don&amp;#8217;t get me wrong, pretty and shiny stuff make me happy; as well as well designed (as far as I can tell) stuff. But I&amp;#8217;m not one with a sense of a visual knick knack. A few friends said I have, but I digress.&lt;/p&gt;

&lt;p&gt;From what I notice, your personal site is your first line of &amp;#8220;defense&amp;#8221; when it comes to portfolio building, so you might be able to tell why I was so eager to make sure everything was &lt;em&gt;minimal&lt;/em&gt;, &lt;em&gt;simple&lt;/em&gt; and &lt;em&gt;responsive&lt;/em&gt; (buzzwords, yay!). Realistically, I&amp;#8217;m going to bug a few friends, see what things they got going on and build sites for them.&lt;/p&gt;

&lt;h2 id=&#39;closing_notes&#39;&gt;Closing Notes&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m taking this refresh as a chance for me to make things look anew for me; perhaps as a way to make peace to myself and my coding ways. I&amp;#8217;m going to do this right; and I&amp;#8217;m looking for all the help that I can get.&lt;/p&gt;
&lt;div class=&#39;footnotes&#39;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&#39;fn:1&#39;&gt;
&lt;p&gt;http://en.wikipedia.org/wiki/Periwinkle_(color)&lt;/p&gt;
&lt;a href=&#39;#fnref:1&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id=&#39;fn:2&#39;&gt;
&lt;p&gt;More on this later into the month.&lt;/p&gt;
&lt;a href=&#39;#fnref:2&#39; rev=&#39;footnote&#39;&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Wintermute's the Name, JARVIS's the Game</title>
    <link href="http://jalcine.me/weblog/weblog/wintermutes-the-name"/>
    <updated>2013-07-01T21:14:00-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/wintermutes-the-name</id>
    <content type="html">&lt;p&gt;When people ask me what I do, I almost always reply with the sentence, &amp;#8221;I&amp;#8217;m a full stack web developer&amp;#8221;. It&amp;#8217;s not a lie, but it&amp;#8217;s only what I do because it helps me pay the bills. That might read wrong to some people, but web development has taught me a lot about remote system management and database management, so it has an immense value-add to my end-goal. &lt;!-- more --&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before continuning, I strongly recommend becoming acquainted with &lt;a href=&#39;http://en.wikipedia.org/wiki/Edwin_Jarvis&#39;&gt;JARVIS&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt=&#39;Tony shopping on Amazon.&#39; src=&#39;http://25.media.tumblr.com/tumblr_m42tdvzs3M1qmr448o1_r1_500.jpg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jarvis&lt;/strong&gt; is practically and not yet entirely what I want to build out of an self-replicating operating system. That was the biggest aspect of the platform; it has to be able to spread itself whenever necessary. In conjunction to that, it has to understand how far it spread out. It needs to know its environment and what it&amp;#8217;s capable of doing in said environment. It also needs a level of grasping context. I originally called it &lt;em&gt;Taylor&lt;/em&gt;, but after a recommendation from a friend; the name&amp;#8217;s &lt;strong&gt;Wintermute&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#39;run_forest_run&#39;&gt;Run, Forest, Run&lt;/h2&gt;

&lt;p&gt;The one thing about computers that make them so useful to us is their adbundance. One computer on the planet wouldn&amp;#8217;t be able to hold Facebook, Google, and Microsoft. But farms and farms of them can and have them run insanely fast. There&amp;#8217;s all of that good and juicy stuff like remote procedure calling, shared memory and core processing clustering. All of that are things I&amp;#8217;d want to incorporate into the foundation of this &amp;#8220;big idea&amp;#8221; of mine.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;A Internet of Things&#39; src=&#39;http://i2.cdn.turner.com/cnn/dam/assets/130502212037-internet-of-things-graphic-story-top.jpg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Another reason for multiple computing units is also for I/O. The platform should be able to recieve data from a multitude of locations and (re)distribute it across those same devices. Think of this as a way of creating many faces for one person. The simplest point of entry would be a microphone and speaker system. Both devices would be connected to a small computing unit whose sole purposes is to directly route that captured audio to a capable machine for parsing said raw audio and a device that can play back said device without much difficulty. That could be considered the simplest form of a human interfacing unit. An extended version would allow for a RCA jack to permit more capable devices to extend the functionality of the device. A key aspect of the physical (and digital) components of this project is that everything is extensible. Extensibility can ensure greater form and function, in my opinion; correct me if I&amp;#8217;m wrong.&lt;/p&gt;

&lt;h2 id=&#39;understanding_its_world&#39;&gt;Understanding its World&lt;/h2&gt;

&lt;p&gt;The following text is going to be heavily opinionated. And it&amp;#8217;s on the (little) research that I&amp;#8217;ve done about knowledge representation and intrepretation in computing.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s three aspects of the building blocks of usable attributes we collect from our environment. They&amp;#8217;re in the form of &lt;strong&gt;data&lt;/strong&gt;. Data, when joined with other bits of data, becomes &lt;strong&gt;information&lt;/strong&gt;, and when information is used in a specific &lt;strong&gt;context&lt;/strong&gt;, it becomes &lt;strong&gt;knowledge&lt;/strong&gt;. My (extremely debateable) definition of each word is as follows:&lt;/p&gt;

&lt;p&gt;* &lt;strong&gt;Data&lt;/strong&gt; represents what we can consider simple attributes. Things like &amp;#8220;Hair grows on heads&amp;#8221; or &amp;#8220;Water is wet&amp;#8221; would be considered data. It&amp;#8217;s storable and forms relationships between two objects. Objects can be literally anything, and wrapping that around my head is still something I can&amp;#8217;t fully grasp myself. But it works.&lt;/p&gt;

&lt;p&gt;* &lt;strong&gt;Context&lt;/strong&gt; represents an environment of constraints where specific bits of data cause other specific bits of data to be modified, spawned, or cease to be. From a programming perspective (specifically Python or Ruby), consider it &lt;code&gt;virtualenv&lt;/code&gt; within &lt;code&gt;tmux&lt;/code&gt; within &lt;code&gt;xterm&lt;/code&gt;. Each layer sets its own version of the environment and tweaks it for specific events and actions to occur.&lt;/p&gt;

&lt;p&gt;* And a whole bunch of other stuff that I don&amp;#8217;t know yet but would hopefully understand in the future.&lt;/p&gt;

&lt;h2 id=&#39;building_wintermute&#39;&gt;Building Wintermute&lt;/h2&gt;

&lt;p&gt;Right now, I&amp;#8217;m rewriting the basis of the Wintermute platform. It&amp;#8217;s a bit weird how I have it envisioned but it&amp;#8217;s something like this. Wintermute would start up in the background, right before the desktop shell is loaded or the login manager, probably even before X is started. For now, it&amp;#8217;s started from the console within a X session. Like a typical extensible application, it searches for a core instance lurking about and starts one if none exists. It loads extensions and then falls to the background, only acting when requested.&lt;/p&gt;

&lt;p&gt;Now, the function of it really exists within the plug-ins. The way I saw it, Wintermute has three extensions that are vital for its operation, the &lt;code&gt;DataApi&lt;/code&gt;, &lt;code&gt;NetworkApi&lt;/code&gt; and &lt;code&gt;LinguisticsApi&lt;/code&gt;. From the names of those libraries, a bit can be dervived.&lt;/p&gt;

&lt;h3 id=&#39;data_in_wintermute&#39;&gt;Data in Wintermute&lt;/h3&gt;

&lt;p&gt;One of the biggest plagues in software applications are object document mappers (or relational mappers, if that&amp;#8217;s your fancy). What I&amp;#8217;m aiming to do is store data abstractly. It&amp;#8217;s going to cause a tiny overhead problem since everything will need a middle format, but it&amp;#8217;d allow for a plethora of data storage solutions like Mongo, MariaDB/MySQL, or even a REST API. It&amp;#8217;s still in the flux of development.&lt;/p&gt;

&lt;h2 id=&#39;networking_with_wintermute&#39;&gt;Networking with Wintermute&lt;/h2&gt;

&lt;p&gt;Now this is the fun part. One theme of Wintermute is to make protocols and barriers as invisible as possible. Data and communication should be able to occur everywhere. So with networking, I initially had the idea of having listening sockets on every kind of socket (ICMP, UDP, TCP, ARP). Obviously, this wasn&amp;#8217;t too much of a good idea due to my lack of knowledge of how to tame this things and since connections can be abstracted away only so far. For now, my solution to this might be implementing a central hub that represents a central stream of data and have workers that connect and translate data accordingly. I figured this to be way more efficient so that if data drops on UDP, we could attempt to reestablish a connection via TCP. I also saw it as a way to introduce more native communication protocols like serial communication and Bluetooth. Awesome!&lt;/p&gt;

&lt;h2 id=&#39;linguistics&#39;&gt;Linguistics&lt;/h2&gt;

&lt;p&gt;Now, this is my bread and butter of Wintermute. Probably the most experimental part of the entire application, I&amp;#8217;d attempt to build a hot-swappable semantically accurate linguistic engine using the theory of link grammar. The only issue with this is that some languages like Farsi won&amp;#8217;t work with it. Since I don&amp;#8217;t know it, I&amp;#8217;m not stressing it too much, but I do hope that someone would come along and help with it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That&amp;#8217;s my idea. What do you think? Lemme know!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Why no POSIX Signal Handling, Qt?</title>
    <link href="http://jalcine.me/weblog/weblog/why-no-posix-signal-handling"/>
    <updated>2013-05-27T03:29:24-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/why-no-posix-signal-handling</id>
    <content type="html">&lt;p&gt;After using &lt;a href=&#39;http://qt-project.org&#39;&gt;Qt&lt;/a&gt; to faciliate nearly all of my C++ project needs, one has to notice why on EARTH doesn&amp;#8217;t it have any means of handling POSIX signals as easy as you handle signals with any other &lt;code&gt;QObject&lt;/code&gt;?&lt;!-- more --&gt; If anything, it should be considered something of equal importance in &lt;code&gt;QCoreApplication&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my own personal venture to fix this, I&amp;#8217;ve begun working on such a little light-weight library (might just move it into a header, to be honest) on GitHub called &lt;a href=&#39;https://github.com/jalcine/QtPosixSignal&#39;&gt;QtPosixSignal&lt;/a&gt;. The &lt;a href=&#39;https://github.com/jalcine/QtPosixSignal/blob/develop/README.md&#39;&gt;README.md&lt;/a&gt; took me some time to think up but it contains the implementation and flow I&amp;#8217;d like it to have. I&amp;#8217;m open to suggestions on how to go about via &lt;a href=&#39;https://github.com/jalcine/QtPosixSignal/issues/new&#39;&gt;issues&lt;/a&gt; to keep the developmental flow of things open.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To better signal handling in Qt apps!&lt;/strong&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Mission Accomplished: laptop.jalcine.me</title>
    <link href="http://jalcine.me/weblog/weblog/mission-accomplished-laptop-dot-jalcine-dot-me"/>
    <updated>2013-05-05T18:08:55-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/mission-accomplished-laptop-dot-jalcine-dot-me</id>
    <content type="html">&lt;p&gt;For about a month or so, my laptop was out of working order due to an issue with the DC jack. That&amp;#8217;s the part of the laptop&amp;#8217;s motherboard that takes power from your laptop charger cable to your battery, thus keeping your laptop up and running. &lt;!-- more --&gt; Me thinking of the cheapest and more educational route, I decided to order a new motherboard for it. I own a &lt;a href=&#39;http://www.asus.com/Notebooks_Ultrabooks/K53e&#39;&gt;ASUS K53E-BBR27 laptop&lt;/a&gt;, so I ordered a replacement board. I learned quite a few things about laptops and their internals when I replaced the board.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When servicing your own machines for the first time, you will almost end up with &amp;#8220;extra&amp;#8221; screws. I&amp;#8217;ve had this happen to me too many times during the numerous times I&amp;#8217;ve opened up my bad boy and took him around town. I had to upgrade my &lt;a href=&#39;http://www.amazon.com/gp/product/B007QXLIWI/ref=oh_details_o01_s00_i00?ie=UTF8&amp;amp;psc=1&#39;&gt;WLAN card&lt;/a&gt; to incorporate bluetooth instead of me having to use a dongle. I also increased my RAM to 8GB thanks to the ever nifty &lt;a href=&#39;http://www.amazon.com/gp/product/B002YU83YO/ref=oh_details_o05_s00_i00?ie=UTF8&amp;amp;psc=1&#39;&gt;4GB DDR3 RAM card&lt;/a&gt;, thus giving my laptop some more thinking space.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The CPU of a computer is a LOT smaller than you&amp;#8217;d expect. I &lt;a href=&#39;http://instagram.com/p/Y5PaWCnPg7/&#39;&gt;held it in my hand&lt;/a&gt; and I couldn&amp;#8217;t get around how this was the symbol of innovation in our day and age. And they get even smaller yet pack even more power. It&amp;#8217;s really amazing how these things work! I had to remove it from the old board and move it to the new board, for some reason, I assumed the new board to come with a new CPU (whomp whomp).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Cleaning the internal components of your laptop make it less noisy (if it makes noise). My laptop rarely makes sound (from places other than the speakers), but I&amp;#8217;ve found that after dusting out the fan and cleaning down the chassis a cleaner and smoother experience. If it doesn&amp;#8217;t have to work hard to cool itself down and move dust out, it&amp;#8217;s a happy camper.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;#8217;s one thing for certain, this entire process of having to service my laptop by hand has further deepen my want to get more into hobby engineering, especially since it&amp;#8217;s become very &amp;#8220;noob&amp;#8221; friendly in recent days. This will be most likely how I spend a considerable amount of my time in the summer; working on PCBs and understanding how to reprogram them to follow a will.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Why I Code: The Start</title>
    <link href="http://jalcine.me/weblog/weblog/why-i-code-the-start"/>
    <updated>2013-04-30T21:12:31-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/why-i-code-the-start</id>
    <content type="html">&lt;p&gt;I don&amp;#8217;t really know when I started. I typically tell people 2006 only because that&amp;#8217;s when I started to use tools designed for programming instead of just Notepad and Internet Explorer.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;And also because it&amp;#8217;s when I began tinkering with compiled languages, a la C++. All of the HTML, CSS and JavaScript I knew was done mostly through experimentation and a lot of Googling. My father noticed my &amp;#8216;extreme&amp;#8217; (as he put it) interest in programming and gave me his introductory C++ programming textbook from class. The disc came with Visual Studio 2005 and even to this day, I have to applaud the comprehensive nature of Visual Studio. The IDE gave me a padding good enough to grow as a computer programmer. I started from the front of the textbook and did as many problems as I could. Going back and revisiting some cases presented in the book allowed me to grow a bit with each turn. Eventually, I couldn&amp;#8217;t learn any more from the book. It was, after all, an introductory course, and my father didn&amp;#8217;t have any more books.&lt;/p&gt;

&lt;p&gt;By this time, it was about 2008. Again, these thoughts and moments evade me but I remember reading somewhere about the world of software and the open source nature of things. It was divided (so I thought) down the middle between open- and closed-source software. This result of search only occurred when I started looking for tools for my biggest dream in software (link). That was how I came across the open source operating system, Ubuntu. It looked very easy to use and it didn&amp;#8217;t seem to require too many work to keep it going. In fact, to this day, I use Debian on my servers and I really miss the ease of use of &amp;#8216;add-apt-repository&amp;#8217;. I downloaded the system into an CD image on the house machine and tried it in VirtualBox. I was stunned that this stuff was out there and no one informed me. The menu layout, panels, widgets, everything had me fall more and more in love with not only Ubuntu but open source technologies as a whole. I believe it was in the month of August of 2010 that I finally and fully adopted open source technology for every aspect of life in tech.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That was the start.&lt;/strong&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Imposing a New Habit</title>
    <link href="http://jalcine.me/weblog/weblog/imposing-a-new-habit"/>
    <updated>2013-03-18T05:41:20-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/imposing-a-new-habit</id>
    <content type="html">&lt;p&gt;I have been working to improve my habits this week and so far, this has been proven productive. I&amp;#8217;ve managed to get a bit of an early morning workout including a full-body stretch so I&amp;#8217;m feeling good. After I &lt;a href=&#39;http://any.do&#39;&gt;check off some tasks&lt;/a&gt; and get some music going, I can begin working on some personal projects and open-source work. Happy Monday!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;ve been trying to write this post a few times. Clusmy me, I dropped my laptop on the floor while I was in my bed and I finally decided to flip it over and check what was happening inside. I found &lt;a href=&#39;http://instagram.com/p/W_uBftnPr0/&#39;&gt;something interesting&lt;/a&gt; and fixed it right after.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The new habit I&amp;#8217;m working towards is focused heavily on productivity. Using Any.Do and with heavy calendar use, I should be able to accomplish all of the work I have set out for myself. At the end of the week, I&amp;#8217;ll also try to provide a recap and determine what I&amp;#8217;m lacking in. What&amp;#8217;s your weekly mission statement?&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Kick-Starting Bugzilla with Plack: a PSGI Solution</title>
    <link href="http://jalcine.me/weblog/weblog/kick-starting-bugzilla-with-plack-a-psgi-solution"/>
    <updated>2013-03-02T06:07:31-05:00</updated>
    <id>http://jalcine.me/weblog//weblog/kick-starting-bugzilla-with-plack-a-psgi-solution</id>
    <content type="html">&lt;p&gt;As mentioned in my landing post, I&amp;#8217;m quite the fan of &lt;a href=&#39;http://bugzilla.org&#39;&gt;Bugzilla&lt;/a&gt;. It powers bug tracking for Firefox, KDE, Eclipse and a lot of other awesome tools out there. Being that Perl is also my first web-friendly language and most acquinated one, I decided to provide a post on how to get Bugzilla up and running by using &lt;a href=&#39;http://plackperl.org&#39;&gt;Plack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those coming from a Ruby background, Plack is the Perl equivalent for Rack, a simple server that can be run using Fast CGI execution. This allows for direct embedded into other web serves like Apache or Nginx or stand-alone uses in a different implementation; the best of both worlds.&lt;/p&gt;

&lt;h2 id=&#39;grab_the_source&#39;&gt;Grab the Source&lt;/h2&gt;

&lt;p&gt;First things first, you&amp;#8217;ll have to grab a copy of Bugzilla&amp;#8217;s source code from their website. They store all of their code in &lt;a href=&#39;http://bazaar.canonical.com&#39;&gt;Bazaar&lt;/a&gt;, so you should have a client set up before preceding. The following code snippets would get you a working copy of &lt;a href=&#39;http://www.bugzilla.org/download/&#39;&gt;a stable build of Bugzilla&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;bzr co bzr://bzr.mozilla.org/bugzilla/4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this time, the installation of Bugzilla is completely up to you. However, I&amp;#8217;d noticed that I was not able to get Bugzilla to start without running &lt;code&gt;./install-module.pl --all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, you&amp;#8217;ll want to grab the snippet of code that &lt;a href=&#39;https://gist.github.com/Bhat-Gurunandan&#39;&gt;Gurunandan Bhat&lt;/a&gt; made available on GitHub to run Bugzilla in a local installation.&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3930079.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;Copy the code above into the newly branched directory of Bugzilla&amp;#8217;s code. Now you can get the show on the road!&lt;/p&gt;

&lt;h2 id=&#39;kicking_up_plack&#39;&gt;Kicking up Plack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#39;http://plackperl.org&#39;&gt;Plack&lt;/a&gt; is a kickass tool, and it&amp;#8217;s easy to grab if you have &lt;a href=&#39;http://search.cpan.org/perldoc?App::cpanminus&#39;&gt;cpanm&lt;/a&gt; installed. If not, follow the instructions on &lt;a href=&#39;http://search.cpan.org/perldoc?App::cpanminus#INSTALL&#39;&gt;the manual&lt;/a&gt; or install Plack the same way you installed the modules for Bugzilla (recommended).&lt;/p&gt;

&lt;p&gt;Once you have those files, you&amp;#8217;re ready to start up Bugzilla.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;plackup --host&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;127.0.0.1 --environment&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s all there this to it! You now have Bugzilla up and running via Plack.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Adopting Technology: Then and Now</title>
    <link href="http://jalcine.me/weblog/weblog/adopting-technology-then-and-now"/>
    <updated>2013-02-23T23:44:19-05:00</updated>
    <id>http://jalcine.me/weblog//weblog/adopting-technology-then-and-now</id>
    <content type="html">&lt;p&gt;This is 2013. We have some awesome technology out here in the wild, like Google Glass, Vuzix and some other awesome guys working into the field. I&amp;#8217;m a very big fan of tech, being a developer and all. But it&amp;#8217;s not that welcoming to people who don&amp;#8217;t understand it. But before I get all crazy about it, I have to explain what I want to appreciate.&lt;/p&gt;

&lt;p&gt;Technology is beginning to move faster than most people can adopt to. We&amp;#8217;re producing more phones, laptops, and other devices each quarter than even before. I currently own a &lt;a href=&#39;http://www.asus.com/Notebooks_Ultrabooks/K53e&#39;&gt;ASUS laptop&lt;/a&gt;, a &lt;a href=&#39;https://play.google.com/store/devices/details?id=nexus_7_16gb&#39;&gt;Google tablet&lt;/a&gt;, and an &lt;a href=&#39;http://www.metropcs.com/metro/detail/LG+Motion%E2%84%A2+4G/LGMS770&#39;&gt;LG Android phone&lt;/a&gt;. Realistically, this is enough for one person. But I also own a personal television rigged to switch to my PC input when used, a pair of Bluetooth headphones that I use when I&amp;#8217;m using my tablet or laptop out of the house, a wireless mouse; &lt;a href=&#39;/&#39;&gt;the list goes on&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#39;nfc_near_field_awesomeness&#39;&gt;NFC: Near Field Awesomeness&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#39;From a poster in the street, you can download music, coupons, tickets&#39; src=&#39;images/posts/nfc_samsung_galaxy_s3.jpg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://idea.imano.com/2011/05/nfc-for-dummies/&#39;&gt;NFC&lt;/a&gt; is the beginning of awesome, contactless technology. Think of it of wireless data bursts flying faster than we can see. The technology is something quite simple, it uses &lt;a href=&#39;http://en.wikipedia.org/wiki/Magnetic_induction&#39;&gt;magentic induction&lt;/a&gt; to implement a means of immediate data transfers. Think of it as plugging your phone to your computer with no cables but only transferring a small document (kilobytes) as opposed to a audio file (megabytes).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But this is stupid. A little charge between my phone? How is this any better than using &lt;a href=&#39;http://en.wikipedia.org/wiki/QR_codes&#39;&gt;QR codes&lt;/a&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt=&#39;QR Code&#39; src=&#39;http://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Wikipedia_mobile_en.svg/220px-Wikipedia_mobile_en.svg.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Using QR (Quick Response) codes is tersely similar to this process. With a higher density of squares, you could, of course, store a lot of data. But QR codes have proven to be very intrustive when it comes to decor. The practice would require adopting the image into design, a burden not needed. NFC tags remove this burden by having wires instead being placed under or within materials and design so patrons of it can interact with head-on. So from a design aspect, it&amp;#8217;s quite useful.&lt;/p&gt;

&lt;p&gt;For hardware manufactors, no effort is required. If anything, it&amp;#8217;s up to the manufactors to provide cameras with no delay in capture. Since QR codes are purely a software implementation and depiction of data, it&amp;#8217;s merely up to having a standard means of interpreting said data and building a quick and easy library for developers to tie in such a function into the application. There&amp;#8217;s programs out there like &lt;a href=&#39;https://play.google.com/store/apps/details?id=com.phewtick&#39;&gt;Phewtick&lt;/a&gt;, &lt;a href=&#39;https://play.google.com/store/apps/details?id=com.eventbrite.attendee&#39;&gt;EventBrite&lt;/a&gt;, and &lt;a href=&#39;https://play.google.com/store/apps/details?id=com.fandango&#39;&gt;Fandango&lt;/a&gt; that make heavy use of QR codes in current use but could be greatly improved in its effectiveness if NFC technology were used in place of it.&lt;/p&gt;

&lt;h2 id=&#39;augumented_reality&#39;&gt;Augumented Reality&lt;/h2&gt;

&lt;p&gt;This concept of merging computer graphics and reality is something done a LOT, and we take it for granted. Most films created make heavy use of &lt;a href=&#39;http://en.wikipedia.org/wiki/Computer-generated_imagery&#39;&gt;CGI&lt;/a&gt; to add some of those amazing fangs, wings and flight scenes we adore in film. Well, a lot of techies out there figured it to be an awesome idea.&lt;/p&gt;

&lt;h2 id=&#39;visually&#39;&gt;Visually&lt;/h2&gt;

&lt;p&gt;&amp;#8211; youtube v1uyQZNg2vE&lt;/p&gt;

&lt;p&gt;That video wasn&amp;#8217;t edited to include those graphics to the upper left, this is &lt;a href=&#39;http://www.google.com/glass&#39;&gt;&lt;em&gt;Google Glass&lt;/em&gt;&lt;/a&gt;. It&amp;#8217;s here and it&amp;#8217;s getting better each and every day. Personally, I&amp;#8217;d love to have it, but it&amp;#8217;d be more of a toy then anything else. Unless you&amp;#8217;re a constant hitchhiker, travelling the world and what not, it&amp;#8217;d be perfect for you. Translate would be your best friend. It also has the best implications for news journalists who happen to be on site and wish to collect data as they go. Self-documentation became a LOT easier.&lt;/p&gt;

&lt;p&gt;The use case of this is quite limited but it can expand as the world itself grows to more of a technologically-connected planet. For example, shopping for clothes, food, or anything in general would become a lot simpler. Picking up an item and scanning the barcode with glass would allow you to potentially purchase it then and there. You could skip the entire line by just producing a digital certificate representing your purchase; it could potentially re-invent shopping.&lt;/p&gt;

&lt;h3 id=&#39;physically&#39;&gt;Physically&lt;/h3&gt;

&lt;p&gt;&amp;#8211; youtube 3b4w749Tud8&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://leapmotion.com&#39;&gt;LeapMotion&lt;/a&gt; is, hands on, the craziest cool piece of technology I&amp;#8217;ve personally seen. It brings hand gestures and control to any device that can connect to it. You can potentially learn how to mold clay pots without getting ready or emulate the act of driving a car without having to leave the comfort of home. This allows for a whole new level of interaction for the desktop (and larger!) systems, but it&amp;#8217;s very young.&lt;/p&gt;

&lt;p&gt;This is something that could be extremely useful in medical places, if a doctor had a full-body scan of a human being, they could easily spin, zoom and manipulate the body without having to do it on the actual person for simulation purposes. This could also lead to better video games that promote one&amp;#8217;s wellness and stability. In short, the Leap Motion is the ticket to mobility in a place where only fingers were needed.&lt;/p&gt;

&lt;h2 id=&#39;intelligent_assistants&#39;&gt;Intelligent Assistants&lt;/h2&gt;

&lt;p&gt;Some of these guys need no introduction. But I will anyways. Introducing &lt;strong&gt;Google Now&lt;/strong&gt; and &lt;strong&gt;Siri&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#39;google_now&#39;&gt;Google Now&lt;/h3&gt;

&lt;p&gt;Below is &lt;a href=&#39;http://www.youtube.com/user/GoogleMobile?feature=watch&#39;&gt;Google Mobile&lt;/a&gt;&amp;#8217;s video about &lt;a href=&#39;http://www.google.com/now&#39;&gt;Google Now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#8211; youtube pPqliPzHYyc&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.google.com/now&#39;&gt;Google Now&lt;/a&gt; is fucking awesome, but only if you&amp;#8217;re a Googler. If you store your contacts, e-mails, calendar, news (via Reader and searches in the Knowledge Graph), then Google Now becomes your very best friend. I&amp;#8217;ve actually gotten so attached, I check it in the morning, lunch, dinner and before I knock out for sleep. It tells me what I&amp;#8217;d like to know at a very balanced level. It&amp;#8217;s Google&amp;#8217;s way to understanding what you&amp;#8217;d like to know before you know, thus curating to your pre-born needs. &lt;a href=&#39;http://www.youtube.com/watch?v=V3-a58Wt2tk&#39;&gt;Inception, much?&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#39;siri&#39;&gt;Siri&lt;/h3&gt;

&lt;p&gt;&amp;#8211; youtube rNsrl86inpo&lt;/p&gt;

&lt;p&gt;Siri, from my research and tinkering, attempts to be your pocket assistant. It doesn&amp;#8217;t do any heavy lifting compared to Google Now. It waits for you to ask a question in order. It doesn&amp;#8217;t seem to &amp;#8220;pry into&amp;#8221; your information like Google Now, but it does leverage a lot of its work on Wolfram Alpha and Nuance&amp;#8217;s speech technology.&lt;/p&gt;

&lt;h1 id=&#39;critique&#39;&gt;Critique?&lt;/h1&gt;

&lt;p&gt;How do you think the future would change when it comes to consumer tech? Feel free to e-mail your ideas or comment below.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Static Web Pages + Git = Awesome Deployment</title>
    <link href="http://jalcine.me/weblog/weblog/static-web-pages-plus-git-equals-awesome-deployment"/>
    <updated>2013-01-26T04:09:00-05:00</updated>
    <id>http://jalcine.me/weblog//weblog/static-web-pages-plus-git-equals-awesome-deployment</id>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been having lots of fun working with &lt;a href=&#39;http://octopress.com&#39;&gt;Octopress&lt;/a&gt; and working with it to make it as simple for me to use as possible. Fortunately, this hasn&amp;#8217;t been much of a challenge. With a bit of trial and error, I&amp;#8217;ve even managed to abstract the act of static web page deployment without too much help! Now, it&amp;#8217;s near possible to implement &amp;#8220;Heroku-like&amp;#8221; deployment. Towards the end, I even throw in a tip on how to do something similar to how Heroku might have deployment done as well!&lt;/p&gt;

&lt;h1 id=&#39;prerequisties&#39;&gt;Prerequisties&lt;/h1&gt;

&lt;p&gt;By continuing from here, I&amp;#8217;m going to assume that you either:&lt;/p&gt;

&lt;p&gt;* have access to a remote server that&amp;#8217;s working with a domain or, * got something like &lt;a href=&#39;http://pow.cx&#39;&gt;Pow&lt;/a&gt; or a local web server running to pick up changes from a folder of choice.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;d allow for you to view changes real-time. Another assumption is that you&amp;#8217;re familiar with &lt;a href=&#39;http://git-scm.com/book/en/Customizing-Git-Git-Hooks&#39;&gt;Git hooks&lt;/a&gt; and &lt;a href=&#39;http://stackoverflow.com/a/9653208/602588&#39;&gt;the difference between the two&lt;/a&gt;. If enough confusion incurs, I might make a separate post about it.&lt;/p&gt;

&lt;h1 id=&#39;setting_up_the_remote_environment&#39;&gt;Setting up the Remote Environment&lt;/h1&gt;

&lt;p&gt;First, make sure you got Git up and running on your system.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git --version
git version 1.7.10.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Secondly, ensure that you can SSH as a user or at least provide yourself with access.&lt;/p&gt;

&lt;p&gt;Next, set up the bare repositories that you&amp;#8217;ll be using to push your changes.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;cd&lt;/span&gt; ~
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;mkdir -p ~/repos/swag
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;cd&lt;/span&gt; ~/repos/swag
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git init --bare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the &lt;code&gt;--bare&lt;/code&gt; option here to tell Git that we only want the Git-specifics (the index, configuration options, etc) on the server, nothing more.&lt;/p&gt;

&lt;p&gt;Next, we go on to set up our hooks. We go back into our mighty console and execute the following:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;c&#39;&gt;# (from working directory ~/repos/swag)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;cd &lt;/span&gt;hooks
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;vi post-receive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With in the &lt;code&gt;post-receive&lt;/code&gt; hook, we enter the following content:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/4618184.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;You&amp;#8217;ll want to change the values of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LIVE_BRANCH&lt;/code&gt; to the name of the branch that&amp;#8217;d hold the code for deployment and,&lt;/li&gt;

&lt;li&gt;&lt;code&gt;LIVE_PATH&lt;/code&gt; to the (preferably) absolute path that of which the code should be stored.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this, you&amp;#8217;ve fully set up your remote enviroment. Now, you can continue off back to your local development machine and continue.&lt;/p&gt;

&lt;h1 id=&#39;setting_up_the_local_environment&#39;&gt;Setting up the Local Environment&lt;/h1&gt;

&lt;p&gt;On your awesome local machine, the act of instant deployment begins. Now, the best part about this is that you can do this with an existing Git branch that has static files or work on this with from scratch if you&amp;#8217;re just starting out.&lt;/p&gt;

&lt;p&gt;In a new directory, clone the repository from the server, add some files, commit and push; the typical personal Git flow.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;c&#39;&gt;# (from an awesome folder)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git clone joe@acme.net:~/repos/swag swag
&lt;span class=&#39;c&#39;&gt;# You might get a warning about cloning an empty repository; it&amp;#39;s fine.&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git add .
&lt;span class=&#39;c&#39;&gt;# Move in the files from the old repository (if it exists)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;mv file1 ../files
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git add .

&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&#39;s2&#39;&gt;&amp;quot;Swag 1 point&amp;quot;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After you push, you might notice information about checking out done in your remotes. That&amp;#8217;s the &lt;code&gt;post-recieve&lt;/code&gt; hook updating the code in reaction to the branch that you pushed.&lt;/p&gt;

&lt;h1 id=&#39;quirks&#39;&gt;Quirks&lt;/h1&gt;

&lt;p&gt;I have to admit, in &lt;a href=&#39;https://gist.github.com/4618184&#39;&gt;the Gist shown above&lt;/a&gt;, there&amp;#8217;s a few problems I&amp;#8217;m going to have to adapt this post to show.&lt;/p&gt;

&lt;p&gt;1. &lt;strong&gt;Single branch push support&lt;/strong&gt; - If you pushed using &lt;code&gt;git push origin --all&lt;/code&gt; or whatever remote you specify, currently this hook would &lt;em&gt;not&lt;/em&gt; be able to notice such a push, or rather, parse it properly. I&amp;#8217;m experimenting with a clean way to do this.&lt;/p&gt;

&lt;p&gt;2. &lt;strong&gt;Merging issues&lt;/strong&gt; - If, for some reason, there was a merging problem, there&amp;#8217;s no way for you to tell, from what I know.&lt;/p&gt;

&lt;p&gt;Feel free to adapt to this tutorial, link back to it and provide more tips. Ciao!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>xf86-networktablet Packaged in Ubuntu</title>
    <link href="http://jalcine.me/weblog/weblog/xf86-networktablet-packaged-in-ubuntu"/>
    <updated>2013-01-23T22:45:00-05:00</updated>
    <id>http://jalcine.me/weblog//weblog/xf86-networktablet-packaged-in-ubuntu</id>
    <content type="html">&lt;p&gt;There&amp;#8217;s some awesome dudes out there in this big ol&amp;#8217; rock. &lt;a href=&#39;https://github.com/rfc2822&#39;&gt;rfc2822&lt;/a&gt; had the nifty idea of building out a module for &lt;a href=&#39;http://www.x.org/wiki/&#39;&gt;Xorg&lt;/a&gt; that, in a nutshell, can turn your Android tablet into a drawing tablet. &lt;!-- more --&gt; There&amp;#8217;s more about it on &lt;a href=&#39;http://blog.dev001.net/post/40681591705/x-org-use-your-android-tablet-as-a-graphics-tablet&#39;&gt;the blog post he mentioned it&lt;/a&gt;, if you&amp;#8217;re curious about the full round down. I had to make some edits to the original packaging to make it a bit niftier for building; tells you what you need to build!&lt;/p&gt;

&lt;p&gt;I took the liberty of taking such an awesome project and packing it up into a nifty PPA for Ubuntu. For now, it&amp;#8217;s in my &lt;a href=&#39;https://launchpad.net/~jackyalcine/+archive/stable&#39;&gt;personal PPA of stable applications&lt;/a&gt;. The source of the Debian packaging for the PPA is &lt;a href=&#39;https://code.launchpad.net/~jackyalcine/+junk/xf86-networktablet-debian&#39;&gt;hosted on Launchpad&lt;/a&gt;. The installation procedure for this PPA would be:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;sudo apt-add-repostiory ppa:~jackyalcine/stable
&lt;span class=&#39;c&#39;&gt;# &amp;lt;Enter&amp;gt;!&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;sudo apt-get install xf86-networktablet-ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, you&amp;#8217;d need to apply these settings directly by logging off and back on. That&amp;#8217;ll be enough to restart the X.org session and load the new module. The only application so far that seems to even consider the use of this seems to be GIMP, but there&amp;#8217;s more practical implications for this. For example, my Google Nexus seems not to fare well with this tool and instead moves the mouse around. Haven&amp;#8217;t figured out why it does there, but I figured that packing and sharing would make it something more viable and reveal more bugs to be fixed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cheers!&lt;/em&gt; Feel free to put your commentary below or tweet me.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>C'mon Nuance, You Didn't Even Ask!</title>
    <link href="http://jalcine.me/weblog/weblog/nuance"/>
    <updated>2013-01-12T18:30:00-05:00</updated>
    <id>http://jalcine.me/weblog//weblog/nuance</id>
    <content type="html">&lt;p&gt;Just about the turn of the new year, a few &lt;a href=&#39;https://www.launchpad.net/~sii&#39;&gt;friends&lt;/a&gt; of mine decided to start a nifty little project. It was planned (and still is) to be the biggest thing in any of our lives.&lt;/p&gt;

&lt;p&gt;I was one of the first developers and another lad, &lt;strong&gt;Dante Ashton&lt;/strong&gt;, led the product design and implementation. I must admit, we were well over our heads with this project but we did what we could and began to design and program out as much as we could for the application. Back in late 2010, early 2011, we had a server spinning and bent to our will. We had an instance of Bugzilla up and running and doing what we wanted to. We were working hard to attempt to understand what no one else did. We did it in an &lt;strong&gt;open&lt;/strong&gt; fashion. We put all of our research in a &lt;strong&gt;centralialized&lt;/strong&gt; place.&lt;/p&gt;

&lt;p&gt;At CES 2013, Nuance Corporation demonstrated an internal version of a project quite similar to ours. So similar to a point where it has the same exact name. Something like that could be expected, whomever read the book &amp;#8221;&lt;a href=&#39;http://www.amazon.com/Neuromancer-William-Gibson/dp/0441012035/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1358108364&amp;amp;sr=1-1&amp;amp;keywords=neuromancer&#39;&gt;Necromancer&lt;/a&gt;&amp;#8221; will not only be connected to the name &lt;strong&gt;Wintermute&lt;/strong&gt;. The project was named &lt;a href=&#39;https://launchpad.net/wintermute&#39;&gt;Wintermute&lt;/a&gt; with its inital sister project &lt;a href=&#39;https://launchpad.net/speechcontrol&#39;&gt;SpeechControl&lt;/a&gt;. Its sister project was meant to pave a way for speech recognition friendliness on Linux. Yes, &lt;strong&gt;Linux&lt;/strong&gt;. I&amp;#8217;ve been a open source advocate for as long as my &lt;code&gt;~/.bash_history&lt;/code&gt; can go and I use Ubuntu for server and desktop purposes. I figured that since it&amp;#8217;s a desktop that&amp;#8217;s mallable to no end, why not adapt it even more? This thought and many others in human-computer interfacing of the KDE and Unity desktop to light.&lt;/p&gt;

&lt;p&gt;I only ask, Nuance, why didn&amp;#8217;t you ask us before going ahead and using that name in your project? I mean, sure, we&amp;#8217;re just a few teens and adults scattered across the globe trying to build up a far-fetched yet buildable idea. But still, there&amp;#8217;s that common deceny aspect. As a software developer, this is a bit daunting. Having a company whose primary (if not sole) focus is speech recognition, we don&amp;#8217;t really stand a chance (for now, at least). I hope that in coming days, Nuance and the Synthetic Intellect Institute would be able to stand side by side, and not butt heads in attempting to provide innovative tools in the speech recognition space.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S: We did have a P.R. release of the project, if curious. &lt;a href=&#39;http://www.omgubuntu.co.uk/2011/02/wintermute-project-aims-to-bring-artificial-intelligence-to-ubuntu&#39;&gt;Akshat over at OMG!Ubuntu&lt;/a&gt; did a nice job of covering us. Hope you enjoy it.&lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
  
  <entry>
    <title>Bugzilla: Work in Progress</title>
    <link href="http://jalcine.me/weblog/weblog/bugzilla-work-in-progress"/>
    <updated>2013-01-04T20:25:00-05:00</updated>
    <id>http://jalcine.me/weblog//weblog/bugzilla-work-in-progress</id>
    <content type="html">&lt;p&gt;I personally love &lt;a href=&#39;http://bugzilla.org&#39;&gt;Bugzilla&lt;/a&gt;. It&amp;#8217;s a true example of tried and true software and it gets the job done. It follows UNIX ideologies down to the bone. But it&amp;#8217;s showing its age. It&amp;#8217;s not really designed for the new Web 3.0 out of the box (and that&amp;#8217;s with good reason, it&amp;#8217;s more on functionality).&lt;/p&gt;

&lt;p&gt;This still isn&amp;#8217;t good. Most modern sites you&amp;#8217;d interact with use a lot of AJAX or a modern MVC framework throughout the platform. This is something I was hoping to see for Bugzilla as future releases came about.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From this point forward, I&amp;#8217;ll be referring to the latest releasde of Bugzilla, version &lt;strong&gt;4.2.3&lt;/strong&gt;, if memory serves me right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#39;web_stack&#39;&gt;Web Stack&lt;/h2&gt;

&lt;p&gt;I mentioned in my first post a few extensions that could help enhance Bugzilla to become a really amazing bug tracking tool. But the first thing that has to be done is quite hard to point out. I&amp;#8217;m not quite sure and I have to do a bit of research, but the minimum version of Perl is going to play a huge role on what can be done here.&lt;/p&gt;

&lt;p&gt;I only bring attention to this largely out of the lack of simplicity when it comes to starting up an instance of Bugzilla. It&amp;#8217;s not intuitive at all in my opinion. This is speaking from a PHP/Zend and Ruby on Rails background so I&amp;#8217;m used to just starting a script in the console and having a web server being kicked up just for that application. Bugzilla requires that it&amp;#8217;s run via another web server, relinquishing that potential to make life a bit easier. Something like this, implementing a web server, or rather, web application stack under Bugzilla is something that the core team has to approve on. It&amp;#8217;s definitely something that could lead to a forking of a project, though.&lt;/p&gt;

&lt;h2 id=&#39;extension_management&#39;&gt;Extension Management&lt;/h2&gt;

&lt;p&gt;With most extensible software, there&amp;#8217;s typically a means of going into the server and maintaining the extensions currently loaded and being used. Bugzilla&amp;#8217;s system for building extensions is beyond simple, it&amp;#8217;s like shit easy to understand and go about doing. The only issue with that is that it &lt;strong&gt;has&lt;/strong&gt; to be done via the console, another pet peeve when you&amp;#8217;re not by the console at the moment. This provoked me to consider building out a extension that does just that. The lives of sysadmins everywhere might get a bit easier.&lt;/p&gt;

&lt;h2 id=&#39;oauth_and_openid&#39;&gt;OAuth and OpenID&lt;/h2&gt;

&lt;p&gt;The name might say it all to a lot of people. Having to create yet another account on yet another platform becomes annoying. I personally feel so, at least. This one still requires a bit of research and testing, though. I haven&amp;#8217;t had much success with Net::OpenID::Consumer. For now, I&amp;#8217;m going to move to a &lt;a href=&#39;http://search.cpan.org/~kgrennan/Net-OAuth-0.28/lib/Net/OAuth/Client.pm&#39;&gt;full OAuth solution&lt;/a&gt; for now and see if anyone wants to help with the OpenID support.&lt;/p&gt;

&lt;h2 id=&#39;theme_management&#39;&gt;Theme Management&lt;/h2&gt;

&lt;p&gt;Now, the big one. THEMES. I feel like you attempt to retheme the entire monster (gentle) that is Bugzilla, you&amp;#8217;d spend a long weekend doing so. Either we could work on making something like Persona for Firefox or even a simple tarball to be hosted and extracted would be awesome. Again, it provides amazing design opporunities for those who want to make such an awesome tool even more awesome.&lt;/p&gt;

&lt;h2 id=&#39;threads_and_comments&#39;&gt;Threads and Comments&lt;/h2&gt;

&lt;p&gt;Okay. Bugzilla&amp;#8217;s comments system is cool. Not great, and it&amp;#8217;s a useful tool. But it leaves so much more to be done. A bug tracking system of Bugzilla&amp;#8217;s potential with integration into VCS systems, IRC and other tools, the commenting system should be awesome as well. I did have a few ideas for it, but again, purely optimistic. Formatting support for commenting could be incorporated, but in order for changes like this to occur without messing up too much with core Bugzilla, the commenting tool would have to be refactored.&lt;/p&gt;

&lt;h2 id=&#39;closing_notes&#39;&gt;Closing Notes&lt;/h2&gt;

&lt;p&gt;Well, I&amp;#8217;m just looking forward to working more and more this year on Bugzilla. I see a lot of potential for the tool and I plan to push the use of it in more open source projects in the future.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>First Starts: A Reboot</title>
    <link href="http://jalcine.me/weblog/weblog/first-starts-a-reboot"/>
    <updated>2012-10-30T14:34:00-04:00</updated>
    <id>http://jalcine.me/weblog//weblog/first-starts-a-reboot</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Well, this is nice. This is my first blog post using &lt;a href=&#39;http://www.octopress.org&#39;&gt;OctoPress&lt;/a&gt; and I have to say, I really don&amp;#8217;t need any other blogging platform besides this one. When they say that this is the hacker&amp;#8217;s blog, they weren&amp;#8217;t kidding. I&amp;#8217;ve literally edited and installed everything from the console with no real hassle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#39;about_myself&#39;&gt;About Myself&lt;/h2&gt;

&lt;p&gt;I might as well begin this blog with a bit of detail about myself. I&amp;#8217;m &lt;strong&gt;Jacky Alcine&lt;/strong&gt;, a software engineer and avid fact checker (when I can be) living in New York City. I spend lots of time of social networks like &lt;a href=&#39;http://www.facebook.com/jacky.alcine&#39;&gt;Facebook&lt;/a&gt; or &lt;a href=&#39;http://www.twitter.com/jackyalcine&#39;&gt;Twitter&lt;/a&gt; but I try to spend more time on &lt;a href=&#39;http://stackoverflow.com/users/602588/jalcine&#39;&gt;StackOverflow&lt;/a&gt; and on &lt;a href=&#39;http://www.github.com/jalcine&#39;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I do a bit of open source work but not as much as I&amp;#8217;d like. Right now, I&amp;#8217;m working with a tech startup here in New York, so time&amp;#8217;s tied up even more, preventing me from giving 100% to open source. That, however, still doesn&amp;#8217;t stop me from contributing to the community.&lt;/p&gt;

&lt;h2 id=&#39;projects_i_like&#39;&gt;Projects I Like&lt;/h2&gt;

&lt;h3 id=&#39;language_background&#39;&gt;Language Background&lt;/h3&gt;

&lt;p&gt;I didn&amp;#8217;t know if this was necessary to mention, but I&amp;#8217;m including it anyways. I&amp;#8217;m a big fan of C++, it being the first programming language I wrote serious code with and it taking me to whole new playing fields. This language taught me the ins and outs of object orientated programming and it made working with the language a tad bit easier. From there, I dabbled a bit with C, since everything manages to be related to that language one way or another. I guess you can call C the binding language or the kernel language. After this, I picked up a bit of C# and Java from experimentation and studying online PDFs about the language. I learned Perl from a book borrowed at the library and picked up Python as a beginner&amp;#8217;s language into &lt;a href=&#39;http://www.ubuntu.com&#39;&gt;Ubuntu&lt;/a&gt;. Now, I got about 6 languages under my belt and I&amp;#8217;m eagar to learn more.&lt;/p&gt;

&lt;h3 id=&#39;bugzilla_nice_but_not_complete&#39;&gt;Bugzilla: Nice but not Complete&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m quite a fan of &lt;a href=&#39;http://www.bugzilla.org&#39;&gt;Bugzilla&lt;/a&gt;. It has an incredible amount of potential and the next few projects I have in mind should definitely bring the attention required to light. The first thing about it that kills me is its lack of real customizibility. Like okay, it has a templating system for implementing new themes, but there&amp;#8217;s no real definite guide on how to do this. I&amp;#8217;m planning on doing this and producing an extension that allows for the maintainence of themes in the platform. Shoot, if anything, you should be able to have separate themes for administrative and casual user experiences.&lt;/p&gt;

&lt;p&gt;Another thing is its lack of support for OpenID authentication or even OAuth. Now, I have to understand and feel a bit of pain for these two. Building applications of any kind with an external dependency for authenication is a pain. I know this and thank God for the magic gems in Ruby that made my life easier. Perl doesn&amp;#8217;t have such a lucky layout and this should be fixed in the near future. This is probably due to the lack of a nice framework being used commonly in Perl. &lt;a href=&#39;http://mojolicio.us/&#39;&gt;Mojolicious&lt;/a&gt; is getting close, though.&lt;/p&gt;

&lt;p&gt;As a bug tracker, Bugzilla &lt;strong&gt;really&lt;/strong&gt; follows the Unix principle well. But, nowadays, awesome software tends to be extensible. That&amp;#8217;s why this section of the post came to be. I wonder how working with testing servers like Hudson/Jenkins and Travis CI could help with Bugzilla&amp;#8217;s functionality. Specific tests could be referencing to a bug and provide contextual information for that bug. That would help me out a lot if I knew that a specific bug was being tested on constantly, a bit reassuring actually.&lt;/p&gt;

&lt;p&gt;So, as a recap, Bugzilla should have the following (as separate extensions):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenID support.&lt;/li&gt;

&lt;li&gt;OAuth support.&lt;/li&gt;

&lt;li&gt;A brand new commenting platform (for God&amp;#8217;s sake!)&lt;/li&gt;

&lt;li&gt;Markdown support in comments.&lt;/li&gt;

&lt;li&gt;Theme management support.&lt;/li&gt;

&lt;li&gt;More AJAX functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any ideas what should be added here, please feel free to shoot me an idea of them. I&amp;#8217;m planning to set up a simple installation of Bugzilla on my server just so users can see my ideal setup of Bugzilla one day. Might give those developers over there a jump-start in the right direction :).&lt;/p&gt;

&lt;h2 id=&#39;closing_words&#39;&gt;Closing Words&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ll definitely will be doing my best to communicate over the blog as often as I can, since it&amp;#8217;s so easy to do so. Thanks for reading, hope to procure more content for you in the near future.&lt;/p&gt;</content>
  </entry>
  
</feed>
